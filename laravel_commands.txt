#Make api controllers 
    php artisan make:model Model/Product -a 
    php artisan make:model Model/Review -a 
#ADD ProductController to the rout i.e. routes/api.php  
    Route::Resource('/products','ProductController');
    php artisan route:list 
#Change the Route as following 
    Route::apiResource('/products','ProductController');
#check again route list 
    php artisan route:list 
#Crate a group of routes as following: 
    Route::group(['prefix'=>'products'],function(){
        Route::apiResource('/{products}/reviews','ReviewController');
    });
#check agian the route by listing them 
    php artisan route:list 

#create factories for migration . 
For this , go to database and corresponding factories . 
create each of the column of model with the help of faker class librarry
#Write the following commands in database\seeder\productseeder.php file 
    factory(App\Model\Product::class, 50)->create();
#write in the seeder class of Review 
    factory(App\Model\Review::class, 50)->create();
#Finally use the php artisan command to seed them 
    php artisan db:seed 
# We created factory files and database tables to migrate them . finally we use the following command to migrate them 
php artisan migrate 
#Then we have fill up the data use factories. 
see the factory  files in databases\factories\
You can populate the data by using php artisan tinker e.g. 
php artisan tinker 
factory(App\User::class , 100)->craete()
#This command will create 100 random users 
# then algain in tinker
factory(App\Model\Prodcut::class , 100)->create()
#This will create 100 products 
#Php artisan tinker 
factory(App\Model\Review::class, 200)->ceate()
#write the models and set the relationship 
then go to php artisan tinker and check the relationship 
    php artisan tinker
     $product=App\Model\Product::all()->find(1)
     $product->reviews 
     $product->reviews->count()
     $reivew=App\Model\Review::find(1)
     $review->user
     $review->product
# In this way you can set up the relationship between the products . 
Now we create resources routing 
#Go to the routes/api.php file and add the following routes 

    Route::apiResource('/products','ProductController');
    Route::group(['prefix'=>'products'],function(){
        Route::apiResource('/{products}/reviews','ReviewController');
    });
# Also Go to ProductController and then add in the index file for example 
    return Product::all()
# Create A Product Resource Collection 
    php artisan  make:resource Product/ProductCollection 
#This will create a  collection in app\resources\ProductCollection. you can look on it 
#Now make another with following command 
    php artisn make:resource Prodcut/ProductResource 
    then change the the file Product/ProductResource which return 
#Today we have created ProductResource 
#03.09.2020 
Now we would like to change the Product resource  by using a ProductResource::collection method . 
Look at the ProductController index mathod .
    return ProductResource::collection(Product  ::all());
#Today I learned about product collection resources. 
#Create the Resource for Review also 
    php artisan make:resource ReviewResource 
#After creating a Review Resources , you can edit it by returning the the review 
   return [
            'customer'=>$this->user->name,
            'body'=> $this->review,
            'star'=>$this->star,
        ];
#Also Add ReviewController index function as following 
 public function index($id)
    {
        //
        // return Review::all()->where('product_id','<=',12);
        // return ReviewResource::Collection($product->reviews);
        return ReviewResource::Collection(Product::find($id)->reviews);

    }
# In this way you can see the reviews in each products 
#Now go to the  
    http://127.0.0.1:8000/api/products/product_id/reviews/
    e.g. 
    http://127.0.0.1:8000/api/products/1/reviews/
    etc. 
# Finally  paginate the Products by adding 
    paginate(20) 
    in productController 
      public function index()
    {
        //
        // return ProductResource::collection(Product::all());
        return ProductCollection::Collection(Product::paginate(5));
    }
# This way I learned how to return product and reviews as api 
#Next we leran about adding laravel passport packages 
#For this , install the passwort packages by using the following command 
    composer require laravel/passport 
 #it will take a  while till the package is installled 
    The Passport service provider registers its own database migration directory with the framework, so you should migrate your database after installing the package. The Passport migrations will create the tables your application needs to store clients and access tokens:

    php artisan migrate
 #Next you use  the following command: 
    php artisan passport:install 
#After running the passport:install command, add the Laravel\Passport\HasApiTokens trait to your App\User model. This trait will provide a few helper methods to your model which allow you to inspect the authenticated user's token and scopes:
the install command gives the following 
    php artisan passport:install
    Encryption keys generated successfully.
    Personal access client created successfully.
Client ID: 1
    Client secret: RlKhXWpNvc6ONuCY8HFKvNpzAqQAiuoucIwTKWSl
    Password grant client created successfully.
Client ID: 2
    Client secret: 86HCo90igKh1X6Yw04DH0yswsF2uwPN68Yiwoi6i
#Rest tomorrow 
04.09.2020 
Today I am learning the use of passport package of laravel . Yesterrday I already installed it . 
In order to test the passport authnication, I am using postman. 
    https://web.postman.co/
    postman.com 
We should use this webiste . This is my first time that I use the postman . So it was  a bit difficult for me 
to find out how to use it. However Now I got an idea to use it. 
#I had some problem to go further  by using post man. So I decided to learn the passport package form the 
tutorial of laravel page 
# I followed further 
I did the followings 
 Today I installed the laravel authnication package with composer 
    composer require laravel/ui 
This command installed the ui package and I ran the follwoing command 
    php artisan ui  vue --auth 
#To publish the Passport Vue components, use the vendor:publish Artisan command:
    php artisan vendor:publish --tag=passport-components
#then I did the following  command 
    npm install & npm run dev 
    npm audit fix 
# There was a problem with the vue version and I used the following command to solve it . 
    npm update vue-template-compiler
 # Then i reran agian the command 
    npm run dev . 
It compiled everything . I could see the autnication and login file where I can land on the home page . 

#However I follow the following video just to use a login controller myself . 
    https://www.youtube.com/watch?v=R3Hec0_U2Cs
#By folloiwng the video I  made the controller as follows: 
    php artisan make:controller Api/V1/LoginController 
Go to the Api\V1\LoginController and edit it as following . 
   PASSPORT_PERSONAL_ACCESS_CLIENT_ID=1
    PASSPORT_PERSONAL_ACCESS_CLIENT_SECRET=RlKhXWpNvc6ONuCY8HFKvNpzAqQAiuoucIwTKWSl
# Add the following lines to AuthServiceProvider in boot file 
        Passport::routes();
        Passport::personalAccessClientId(
            config('passport.personal_access_client.id')
        );

        Passport::personalAccessClientSecret(
            config('passport.personal_access_client.secret')
        );
 #I would like to follow the steps in this script 
 https://dev.to/azibom/how-do-you-make-laravel-7-api-authentication-with-passport-like-a-master-2p67
# I also followed this  tutorial
https://medium.com/modulr/create-api-rest-with-laravel-7-passport-authentication-part-1-a8198e5d0a9

#I created the loginController which looks as follows 

<?php

namespace App\Http\Controllers\Api\V1;
use App\user;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
class AuthController extends Controller  
{
    //
    public function login(Request $request)
    {
        $loginData = $request->validate([
            'email' => 'email|required',
            'password' => 'required'
        ]);

        if (!auth()->attempt($loginData)) {
            return response(['message' => 'Invalid Credentials']);
        }

        $accessToken = auth()->user()->createToken('authToken')->accessToken;

        return response(['user' => auth()->user(), 'access_token' => $accessToken]);
    }
}
#and add the followings in route file 
Route::group([
    'prefix' => 'auth'
], function () {
    Route::post('login', '\App\Http\Controllers\Api\V1\AuthController@login');
    Route::get('login', function(){
         return "test";
    });
    // Route::post('signup', 'AuthController@signup');
 
    Route::group([
        'middleware' => 'auth:api'
    ], function () {
        Route::get('logout', '\App\Http\Controllers\Api\V1\AuthController@logout');
        // Route::get('user', 'AuthController@user');
    });
});
# I write the follwing things in postman 
  in the header type: 
   content-type =application/json 
   Accept   application /json 
    in the body I wrote the following : 
    {
        "email": "mathematikboy@yahoo.com",
        "password": "12345678"
        
    }
Then I checked for post method of the 
http://127.0.0.1:8000/api/auth/login
There was an error . This error was solved by using the follwing command 

    php artisan config:clear
 Then I got a token . now use the token to get the user ! 
 I have added an environment in postman and then 
 Then I checked  for 
 http://127.0.0.1:8000/api/user
 where I got the  full infomration of the author 
 {
    "id": 12,
    "name": "Nab Roshyara",
    "email": "mathematikboy@yahoo.com",
    "email_verified_at": "2020-09-04T22:20:26.000000Z",
    "created_at": "2020-09-04T20:19:57.000000Z",
    "updated_at": "2020-09-04T20:19:57.000000Z"
}  
#read this also 
https://codesource.io/authenticating-laravel-apis-using-passport/
#Create Products 
    #Now we are creating a situation like every authnicated user can create products. For that 
    #For that I have added a __constrcut method in product controller which looks like the following . 
    #Edit product controller method 
    App/Http/Controller/ProductControlelr.php 
    public function __construct(){
        $this->middleware('auth:api')->except(['index', 'show']);
    }
    #check in the post man if the following  link is accessiable 
    link : http://127.0.0.1:8000/api/products
    method: post 
    Accept : application/json 
    content-type: application/json 
    Authorization: auth api {{auth}}
    #How to create authapi environment . 
    #Go to the new environment and edit it by adding 
    variable: auth 
    initial value:  Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiZDMxNGZlMDM5MDRiZWE4OWRkMWYyMjkwNGVjNDI0NWRjYjZlNjU2Zjc1ZGJlMjE1YzBlOWFmNWQ4NTI5ZmJiYTljNzhhMDAxNmFlYzVmOGEiLCJpYXQiOjE1OTkzMjQ5NTgsIm5iZiI6MTU5OTMyNDk1OCwiZXhwIjoxNjMwODYwOTU4LCJzdWIiOiIxMiIsInNjb3BlcyI6W119.K8QTS4gBAPaUTJY3eMxtClGpCMq9xMr91gbUOoiW3n8JiXnuh9168qD7Kks4OL-4NSnOVWywEIITEnMVbtcnDya2azWtWWDCws51xKGjkqFidwetlynv1lpZITQEIc9oXGXjQ9xswLcmj1YzG0WkKFRL74o-Nu-GPBNEYKUH-WnyTuLfOycpaPHjD_uY99iHjmnvFHSpVWiSzygaNPnz0RRhlUtdqvNlhP9bnEuIA8_K6JTrX3rPV9sBGRlytleLEwjkq4jJfuRlzqBA6Wu_rMYP12c7w5YTAtl3JtH3bQd6JyMP5CkXaNJ1cBKLexT4CcY0nhbRqW7yJ31yRH91FwPJCyFFA-roQwnYHSOP1e1rSGYDDJ1n6IafMYLXWX64GdPT1_6RPPavDnZivU72mC1BQpTad4IzyI_uB6QFX1Tk2Pjnxgd7YaX3a5aayLaZrAE9Jo9yvaJX1U4oCrnZ7CNkWWRGD7pwC-PQkkeukM-XDtxipPdxhQN7i4BzqCDkzAqtnZUuyYb47HWnmuAUknRuRP6oVnNm6GP4ZSU72nQMtdUy1XDkE4vXPdhcpcsNmPRihZoHscWIgV4Cdn15UA8kdV5NRB-EpOdNCvras--c70SX0j4FcBLWYF54qS_B2Vqr46hJBRJ9jbVU34dPFt8H3p2MPr9uW-Rh00OrD6U
    #use this as authapi environment 
    #and add 
    authorization : {{auth}}
#   #
    #Above link hit the store method 
#Product Validation 
    #For the validation , we want to create a ProductRequest Resouce where we set the validation rule . 
    #For this, we use the following command 
    php artisan make:request ProductRequest 
    #This creates a product request . Here you can define two things. 
#    #1. authorization 
    public function authorize()
    {
        return true;
    }
#   #2. Rules .e.g. validation 
    return [
            //
            'name' => 'required',
            'slug' => 'required',
            'description' => 'required',
            'price1' => 'required',
            'price2' => 'required',
            'stock' => 'required',
            'discount' => 'required',
            'summary' => 'required'
        ];
#       #finally you can use ProductRequest instead of Request 
        e.g. look at the following product controller store method . 
        public function store(ProductRequest $request)
    {
        //  $validate =[
        //     'name' => 'required',
        //     'slug' => 'required',
        //     'description' => 'required',
        //     'price1' => 'required',
        //     'price2'=>'required',
        //     'stock' => 'required',
        //     'discount' => 'required',
        //     'summary' => 'required'
             
        //  ];
        //  $validateData =$request->validate($validate);
         $validateData =$request->all();
         $product =new Product; 
         $product->name= $validateData['name'];
         $product->slug= $validateData['slug'];
         $product->description = $validateData['description'];
         $product->price1 = $validateData['price1']; 
         $product->price2 = $validateData['price2'];
         $product->stock = $validateData['stock'];
         $product->discount = $validateData['discount'];
         $product->summary = $validateData['summary'];
         $product->save();

         return response([
             'data'=> new ProductResource($product)
         ], Response::HTTP_CREATED);
        //
      } 
 #Update of the Products. 
    #In order to update the products, we need to use the update method. 
    #Agian we need same condition to check it with postman 
    # 
    public function update(Request $request, Product $product)
    {
        //
        $update= $request->all();
        if ($update['name']) {
            $product['name'] = $update['name'];
            unset($request['name']);
        }
            if($update['description']){
                   $product['description'] =$update['description']; 
                   unset($request['description']);
            }
            // $product->update($update);
            
       return response([
            'data' => new ProductResource($product)
        ], Response::HTTP_CREATED);
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Model\Product  $product
     * @return \Illuminate\Http\Response
     */
#   #For Delete purpose      
    public function destroy(Product $product)
    {
        //
        
        $product->delete();
         return response(null, Response::HTTP_NO_CONTENT);
    }
#   # All functions are working            
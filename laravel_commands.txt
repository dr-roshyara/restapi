#Make api controllers 
    php artisan make:model Model/Product -a 
    php artisan make:model Model/Review -a 
#ADD ProductController to the rout i.e. routes/api.php  
    Route::Resource('/products','ProductController');
    php artisan route:list 
#Change the Route as following 
    Route::apiResource('/products','ProductController');
#check again route list 
    php artisan route:list 
#Crate a group of routes as following: 
    Route::group(['prefix'=>'products'],function(){
        Route::apiResource('/{products}/reviews','ReviewController');
    });
#check agian the route by listing them 
    php artisan route:list 

#create factories for migration . 
For this , go to database and corresponding factories . 
create each of the column of model with the help of faker class librarry
#Write the following commands in database\seeder\productseeder.php file 
    factory(App\Model\Product::class, 50)->create();
#write in the seeder class of Review 
    factory(App\Model\Review::class, 50)->create();
#Finally use the php artisan command to seed them 
    php artisan db:seed 
# We created factory files and database tables to migrate them . finally we use the following command to migrate them 
php artisan migrate 
#Then we have fill up the data use factories. 
see the factory  files in databases\factories\
You can populate the data by using php artisan tinker e.g. 
php artisan tinker 
factory(App\User::class , 100)->craete()
#This command will create 100 random users 
# then algain in tinker
factory(App\Model\Prodcut::class , 100)->create()
#This will create 100 products 
#Php artisan tinker 
factory(App\Model\Review::class, 200)->ceate()
#write the models and set the relationship 
then go to php artisan tinker and check the relationship 
    php artisan tinker
     $product=App\Model\Product::all()->find(1)
     $product->reviews 
     $product->reviews->count()
     $reivew=App\Model\Review::find(1)
     $review->user
     $review->product
# In this way you can set up the relationship between the products . 
Now we create resources routing 
#Go to the routes/api.php file and add the following routes 

    Route::apiResource('/products','ProductController');
    Route::group(['prefix'=>'products'],function(){
        Route::apiResource('/{products}/reviews','ReviewController');
    });
# Also Go to ProductController and then add in the index file for example 
    return Product::all()
# Create A Product Resource Collection 
    php artisan  make:resource Product/ProductCollection 
#This will create a  collection in app\resources\ProductCollection. you can look on it 
#Now make another with following command 
    php artisn make:resource Prodcut/ProductResource 
    then change the the file Product/ProductResource which return 
#Today we have created ProductResource 
#03.09.2020 
Now we would like to change the Product resource  by using a ProductResource::collection method . 
Look at the ProductController index mathod .
    return ProductResource::collection(Product  ::all());
#Today I learned about product collection resources. 
#Create the Resource for Review also 
    php artisan make:resource ReviewResource 
#After creating a Review Resources , you can edit it by returning the the review 
   return [
            'customer'=>$this->user->name,
            'body'=> $this->review,
            'star'=>$this->star,
        ];
#Also Add ReviewController index function as following 
 public function index($id)
    {
        //
        // return Review::all()->where('product_id','<=',12);
        // return ReviewResource::Collection($product->reviews);
        return ReviewResource::Collection(Product::find($id)->reviews);

    }
# In this way you can see the reviews in each products 
#Now go to the  
    http://127.0.0.1:8000/api/products/product_id/reviews/
    e.g. 
    http://127.0.0.1:8000/api/products/1/reviews/
    etc. 
# Finally  paginate the Products by adding 
    paginate(20) 
    in productController 
      public function index()
    {
        //
        // return ProductResource::collection(Product::all());
        return ProductCollection::Collection(Product::paginate(5));
    }
# This way I learned how to return product and reviews as api 
#Next we leran about adding laravel passport packages 
#For this , install the passwort packages by using the following command 
    composer require laravel/passport 
 #it will take a  while till the package is installled 
    The Passport service provider registers its own database migration directory with the framework, so you should migrate your database after installing the package. The Passport migrations will create the tables your application needs to store clients and access tokens:

    php artisan migrate
 #Next you use  the following command: 
    php artisan passport:install 
#After running the passport:install command, add the Laravel\Passport\HasApiTokens trait to your App\User model. This trait will provide a few helper methods to your model which allow you to inspect the authenticated user's token and scopes:
the install command gives the following 
$ php artisan passport:install
Encryption keys generated successfully.
Personal access client created successfully.
Client ID: 1
    Client secret: RlKhXWpNvc6ONuCY8HFKvNpzAqQAiuoucIwTKWSl
    Password grant client created successfully.
Client ID: 2
    Client secret: 86HCo90igKh1X6Yw04DH0yswsF2uwPN68Yiwoi6i
#rest tomorrow 

